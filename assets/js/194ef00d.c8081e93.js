"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[42234],{28453:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>s});var t=o(96540);const i={},r=t.createContext(i);function c(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(r.Provider,{value:n},e.children)}},48110:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"tuts/tutorials/programming/python/error-handling-and-exception-handling","title":"Error Handling and Exception Handling","description":"Errors and exceptions are an inevitable part of programming. Python provides a robust error handling mechanism to catch and handle these errors gracefully. In this section, we\'ll explore how to handle errors and exceptions effectively in Python.","source":"@site/docs/tuts/tutorials/programming/python/6-error-exception-handling.md","sourceDirName":"tuts/tutorials/programming/python","slug":"/tuts/tutorials/programming/python/error-handling-and-exception-handling","permalink":"/docs/tuts/tutorials/programming/python/error-handling-and-exception-handling","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Python","permalink":"/docs/tags/python"},{"inline":true,"label":"Error Handling","permalink":"/docs/tags/error-handling"},{"inline":true,"label":"Exception Handling","permalink":"/docs/tags/exception-handling"}],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"id":"error-handling-and-exception-handling","title":"Error Handling and Exception Handling","tags":["Python","Error Handling","Exception Handling"]}}');var i=o(74848),r=o(28453);const c={sidebar_position:6,id:"error-handling-and-exception-handling",title:"Error Handling and Exception Handling",tags:["Python","Error Handling","Exception Handling"]},s=void 0,a={},l=[{value:"The try-except Block",id:"the-try-except-block",level:3},{value:"Handling Specific Exceptions",id:"handling-specific-exceptions",level:3},{value:"The else Block",id:"the-else-block",level:3},{value:"The finally Block",id:"the-finally-block",level:3},{value:"Raising Exceptions",id:"raising-exceptions",level:3},{value:"Github Repo",id:"github-repo",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Errors and exceptions are an inevitable part of programming. Python provides a robust error handling mechanism to catch and handle these errors gracefully. In this section, we'll explore how to handle errors and exceptions effectively in Python."}),"\n",(0,i.jsx)(n.h3,{id:"the-try-except-block",children:"The try-except Block"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"try-except"})," block is used to handle exceptions in Python. The code inside the ",(0,i.jsx)(n.code,{children:"try"})," block is executed, and if an exception occurs, it is caught and handled in the ",(0,i.jsx)(n.code,{children:"except"})," block. Here's a basic example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'try:\n    # Code that may raise an exception\n    result = 10 / 0\nexcept:\n    # Code to handle the exception\n    print("An error occurred!")\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above code, we attempt to divide 10 by 0, which raises a ",(0,i.jsx)(n.code,{children:"ZeroDivisionError"}),". The ",(0,i.jsx)(n.code,{children:"except"})," block catches this exception and executes the code inside it, printing the error message."]}),"\n",(0,i.jsx)(n.h3,{id:"handling-specific-exceptions",children:"Handling Specific Exceptions"}),"\n",(0,i.jsxs)(n.p,{children:["You can handle specific exceptions by specifying the type of exception after the ",(0,i.jsx)(n.code,{children:"except"})," keyword. This allows you to provide different handling logic for different types of exceptions. Here's an example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'try:\n    # Code that may raise an exception\n    result = 10 / 0\nexcept ZeroDivisionError:\n    # Code to handle the ZeroDivisionError\n    print("Cannot divide by zero!")\nexcept ValueError:\n    # Code to handle the ValueError\n    print("Invalid value!")\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above code, we have separate ",(0,i.jsx)(n.code,{children:"except"})," blocks for ",(0,i.jsx)(n.code,{children:"ZeroDivisionError"})," and ",(0,i.jsx)(n.code,{children:"ValueError"}),". Depending on the type of exception that occurs, the corresponding block will be executed."]}),"\n",(0,i.jsx)(n.h3,{id:"the-else-block",children:"The else Block"}),"\n",(0,i.jsxs)(n.p,{children:["You can also include an ",(0,i.jsx)(n.code,{children:"else"})," block after the ",(0,i.jsx)(n.code,{children:"except"})," block to specify code that should be executed when no exceptions occur. This block is optional. Here's an example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'try:\n    # Code that may raise an exception\n    result = 10 / 2\nexcept ZeroDivisionError:\n    # Code to handle the ZeroDivisionError\n    print("Cannot divide by zero!")\nelse:\n    # Code to execute if no exceptions occur\n    print("Result:", result)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above code, the ",(0,i.jsx)(n.code,{children:"else"})," block will be executed if no exception occurs. In this case, it prints the result of the division."]}),"\n",(0,i.jsx)(n.h3,{id:"the-finally-block",children:"The finally Block"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"finally"})," block is used to specify code that should be executed regardless of whether an exception occurred or not. This block is optional but is commonly used for cleanup operations. Here's an example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'try:\n    # Code that may raise an exception\n    result = 10 / 2\nexcept ZeroDivisionError:\n    # Code to handle the ZeroDivisionError\n    print("Cannot divide by zero!")\nfinally:\n    # Code to execute regardless of exceptions\n    print("End of operation")\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above code, the ",(0,i.jsx)(n.code,{children:"finally"}),' block will always be executed, whether an exception occurred or not. It prints "End of operation" to indicate the end of the try-except block.']}),"\n",(0,i.jsx)(n.h3,{id:"raising-exceptions",children:"Raising Exceptions"}),"\n",(0,i.jsxs)(n.p,{children:["You can also manually raise exceptions using the ",(0,i.jsx)(n.code,{children:"raise"})," statement. This allows you to create custom exceptions or raise built-in exceptions based on certain conditions. Here's an example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'try:\n    age = int(input("Enter your age: "))\n    if age < 0:\n        raise ValueError("Age cannot be negative!")\nexcept ValueError as e:\n    print(str(e))\nelse:\n    print(f"Entered age {age}")\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above code, we ask the user to enter their age. If the entered age is negative, we raise a ",(0,i.jsx)(n.code,{children:"ValueError"})," with a custom error message."]}),"\n",(0,i.jsx)(n.h3,{id:""}),"\n",(0,i.jsx)(n.p,{children:"Summary"}),"\n",(0,i.jsxs)(n.p,{children:["In this section, we explored error handling and exception handling in Python. We learned how to use the ",(0,i.jsx)(n.code,{children:"try-except"})," block to catch and handle exceptions, handle specific exceptions, include the ",(0,i.jsx)(n.code,{children:"else"})," and ",(0,i.jsx)(n.code,{children:"finally"})," blocks, and raise exceptions. Proper error handling ensures that your code can gracefully handle unexpected situations and provides a better user experience."]}),"\n",(0,i.jsx)(n.h3,{id:"github-repo",children:"Github Repo"}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["You can refer to and clone the code samples for this tutorial from the ",(0,i.jsx)(n.a,{href:"https://github.com/certifysphere/python-code-samples",children:"GitHub repository"}),"."]}),(0,i.jsx)(n.p,{children:"To clone the repository, you can use the following command:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/certifysphere/python-code-samples.git\n"})}),(0,i.jsxs)(n.p,{children:["You can then navigate to the ",(0,i.jsx)(n.code,{children:"/src"})," directory to access all the code samples given in this tutorial."]})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);