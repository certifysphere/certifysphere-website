"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[33280],{28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var o=s(96540);const i={},t=o.createContext(i);function r(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(t.Provider,{value:n},e.children)}},55550:e=>{e.exports=JSON.parse('{"permalink":"/blog/dotenv-files-nodejs-expressjs","source":"@site/blog/2023-07-21-dotenv-file-nodejs.md","title":"dotEnv(.env) files in Express Node.js app","description":"Creating a .env file is a common practice in Node.js projects to store environment-specific configuration variables. These variables are typically sensitive data or settings that may change depending on the environment where the application is running, such as development, testing, staging, or production.","date":"2023-07-21T00:00:00.000Z","tags":[{"inline":true,"label":"dotenv","permalink":"/blog/tags/dotenv"},{"inline":true,"label":"node","permalink":"/blog/tags/node"},{"inline":true,"label":"express","permalink":"/blog/tags/express"}],"readingTime":1.76,"hasTruncateMarker":false,"authors":[{"name":"Vishal","socials":{},"key":null,"page":null}],"frontMatter":{"slug":"dotenv-files-nodejs-expressjs","title":"dotEnv(.env) files in Express Node.js app","authors":{"name":"Vishal"},"tags":["dotenv","node","express"]},"unlisted":false,"prevItem":{"title":"Enabling CORS in an Express Node.js app","permalink":"/blog/enabling-cors-in-an-express-node.js-app"},"nextItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"}}')},97897:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var o=s(55550),i=s(74848),t=s(28453);const r={slug:"dotenv-files-nodejs-expressjs",title:"dotEnv(.env) files in Express Node.js app",authors:{name:"Vishal"},tags:["dotenv","node","express"]},a=void 0,l={authorsImageUrls:[void 0]},d=[];function c(e){const n={code:"code",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Creating a ",(0,i.jsx)(n.code,{children:".env"})," file is a common practice in Node.js projects to store environment-specific configuration variables. These variables are typically sensitive data or settings that may change depending on the environment where the application is running, such as development, testing, staging, or production."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:".env"})," file should not be committed to version control systems like Git, as it may contain sensitive information. Instead, it is usually added to the ",(0,i.jsx)(n.code,{children:".gitignore"})," file to prevent accidental commits."]}),"\n",(0,i.jsx)(n.p,{children:"Here's how you can set up different files for different environments:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:".env"})," file: This file will contain default values for your environment variables that are common across all environments."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.code,{children:".env.local"}),", ",(0,i.jsx)(n.code,{children:".env.dev"}),", ",(0,i.jsx)(n.code,{children:".env.staging"}),", and ",(0,i.jsx)(n.code,{children:".env.prod"}),": These files will contain environment-specific variables for local development, development environment, staging environment, and production environment, respectively."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Load environment-specific variables based on the running environment: Your application will read the appropriate ",(0,i.jsx)(n.code,{children:".env"})," file depending on the environment it is running in. For example, when running locally for development, it will use ",(0,i.jsx)(n.code,{children:".env.local"}),", and when deployed to production, it will use ",(0,i.jsx)(n.code,{children:".env.prod"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here's an example of the content of these files:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:".env"})," (Default variables):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"PORT=3002\nDB_HOST=localhost\nDB_PORT=5432\nDB_NAME=myappdb\nDB_USER=myappuser\nDB_PASSWORD=mypassword\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:".env.local"})," (Local development variables):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"DB_HOST=localhost\nDB_PORT=5432\nDB_NAME=myappdb_dev\nDB_USER=myappuser_dev\nDB_PASSWORD=mydevpassword\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:".env.dev"})," (Development environment variables):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"DB_HOST=dev-db-host\nDB_PORT=5432\nDB_NAME=myappdb_dev\nDB_USER=myappuser_dev\nDB_PASSWORD=mydevpassword\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:".env.staging"})," (Staging environment variables):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"DB_HOST=staging-db-host\nDB_PORT=5432\nDB_NAME=myappdb_staging\nDB_USER=myappuser_staging\nDB_PASSWORD=mystagingpassword\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:".env.prod"})," (Production environment variables):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"DB_HOST=prod-db-host\nDB_PORT=5432\nDB_NAME=myappdb_prod\nDB_USER=myappuser_prod\nDB_PASSWORD=myprodpassword\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In your Node.js/Express app, you can use a package like ",(0,i.jsx)(n.code,{children:"dotenv"})," to read these environment variables and use them in your code. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const dotenv = require('dotenv');\ndotenv.config();\n\nconst port = process.env.PORT || 3002;\nconst dbHost = process.env.DB_HOST;\nconst dbPort = process.env.DB_PORT;\nconst dbName = process.env.DB_NAME;\nconst dbUser = process.env.DB_USER;\nconst dbPassword = process.env.DB_PASSWORD;\n\n// Use these variables in your application code...\n"})}),"\n",(0,i.jsx)(n.p,{children:"By setting up your environment variables in this way, you can easily switch between different environments without modifying your code, making it easier to manage configurations for various deployment scenarios."})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);